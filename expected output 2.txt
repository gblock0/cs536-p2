The following is the expected output when
a complete CSX scanner is tested using file test.csx:

     [java] Begin test of CSX scanner. Scanning file test.csx:
     [java] 1:1 	CLASS
     [java] 1:7 	identifier(test)
     [java] 1:12 	{
     [java] 7:1 	INT
     [java] 7:5 	identifier(i)
     [java] 7:7 	=
     [java] 7:9 	integer literal(0)
     [java] 7:25 	;
     [java] 8:1 	INT
     [java] 8:5 	identifier(j)
     [java] 8:7 	=
     [java] 8:9 	integer literal(-123)
     [java] 8:13 	;
     [java] 9:1 	INT
     [java] 9:5 	identifier(bigPos)
     [java] 9:12 	=
     [java] Error: Integer literal 11111111111111111111111111111111111111 too large; replaced with 2147483647
     [java] 9:14 	integer literal(2147483647)
     [java] 9:52 	;
     [java] 10:1 	INT
     [java] 10:5 	identifier(bigNeg)
     [java] 10:12 	=
     [java] Error: Integer literal ~2222222222222222222222222222222222222 too small; replaced with -2147483648
     [java] 10:14 	integer literal(-2147483648)
     [java] 10:52 	;
     [java] 11:1 	BOOL
     [java] 11:6 	identifier(ja)
     [java] 11:9 	=
     [java] 11:11 	TRUE
     [java] 11:15 	;
     [java] 12:1 	BOOL
     [java] 12:6 	identifier(nein)
     [java] 12:11 	=
     [java] 12:13 	FALSE
     [java] 12:18 	;
     [java] 13:1 	CHAR
     [java] 13:6 	identifier(c)
     [java] 13:8 	=
     [java] 13:10 	character literal(c)
     [java] 13:13 	;
     [java] 14:1 	CHAR
     [java] 14:6 	identifier(nl)
     [java] 14:9 	=
     [java] 14:11 	character literal(\n)
     [java] 14:15 	;
     [java] 15:1 	CHAR
     [java] 15:6 	identifier(tab)
     [java] 15:10 	=
     [java] 15:12 	character literal(\t)
     [java] 15:16 	;
     [java] 16:1 	CHAR
     [java] 16:6 	identifier(bslash)
     [java] 16:13 	=
     [java] 16:15 	character literal(\)
     [java] 16:19 	;
     [java] 17:1 	CHAR
     [java] 17:6 	identifier(tic)
     [java] 17:10 	=
     [java] 17:12 	character literal(')
     [java] 17:16 	;
     [java] 18:1 	CONST
     [java] 18:7 	identifier(ten)
     [java] 18:11 	=
     [java] 18:13 	integer literal(10)
     [java] 18:15 	;
     [java] 19:1 	INT
     [java] 19:5 	identifier(ar)
     [java] 19:7 	[
     [java] 19:8 	integer literal(100)
     [java] 19:11 	]
     [java] 19:12 	;
     [java] 21:1 	VOID
     [java] 21:6 	identifier(p)
     [java] 21:7 	(
     [java] 21:8 	INT
     [java] 21:12 	identifier(j)
     [java] 21:13 	)
     [java] 21:15 	{
     [java] 22:4 	PRINT
     [java] 22:9 	(
     [java] 22:10 	string literal("Ans = ")
     [java] 22:18 	,
     [java] 22:20 	identifier(j)
     [java] 22:21 	+
     [java] 22:22 	integer literal(1)
     [java] 22:23 	,
     [java] 22:25 	string literal("\n")
     [java] 22:29 	)
     [java] 22:30 	;
     [java] 23:1 	}
     [java] 25:1 	INT
     [java] 25:5 	identifier(f)
     [java] 25:6 	(
     [java] 25:7 	INT
     [java] 25:11 	identifier(i)
     [java] 25:12 	)
     [java] 25:13 	{
     [java] 26:9 	identifier(ar)
     [java] 26:11 	[
     [java] 26:12 	identifier(i)
     [java] 26:13 	]
     [java] 26:15 	=
     [java] 26:17 	integer literal(100)
     [java] 26:20 	;
     [java] 27:2 	RETURN
     [java] 27:9 	identifier(i)
     [java] 27:10 	+
     [java] 27:11 	integer literal(1)
     [java] 27:12 	;
     [java] 28:1 	}
     [java] 30:1 	READ
     [java] 30:5 	(
     [java] 30:6 	identifier(b)
     [java] 30:7 	)
     [java] 30:8 	;
     [java] 32:1 	IF
     [java] 32:4 	(
     [java] 32:5 	identifier(b)
     [java] 32:7 	||
     [java] 32:10 	TRUE
     [java] 32:14 	)
     [java] 33:2 	identifier(b)
     [java] 33:4 	=
     [java] 33:6 	identifier(b)
     [java] 33:8 	&&
     [java] 33:11 	FALSE
     [java] 33:16 	;
     [java] 34:1 	ELSE
     [java] 34:6 	identifier(b)
     [java] 34:8 	=
     [java] 34:10 	!
     [java] 34:11 	(
     [java] 34:12 	identifier(b)
     [java] 34:14 	||
     [java] 34:17 	TRUE
     [java] 34:21 	)
     [java] 34:22 	;
     [java] 36:1 	identifier(L)
     [java] 36:2 	:
     [java] 36:4 	WHILE
     [java] 36:10 	(
     [java] 36:11 	identifier(i)
     [java] 36:13 	!=
     [java] 36:16 	integer literal(0)
     [java] 36:17 	)
     [java] 36:19 	{
     [java] 37:2 	identifier(i)
     [java] 37:4 	=
     [java] 37:6 	identifier(i)
     [java] 37:7 	*
     [java] 37:8 	identifier(i)
     [java] 37:9 	/
     [java] 37:10 	integer literal(2)
     [java] 37:11 	;
     [java] 37:13 	BREAK
     [java] 37:19 	identifier(L)
     [java] 37:20 	;
     [java] 38:2 	identifier(i)
     [java] 38:4 	=
     [java] 38:6 	identifier(i)
     [java] 38:7 	/
     [java] 38:8 	(
     [java] 38:9 	identifier(i)
     [java] 38:10 	-
     [java] 38:11 	integer literal(2)
     [java] 38:12 	)
     [java] 38:13 	;
     [java] 38:15 	CONTINUE
     [java] 38:24 	identifier(L)
     [java] 39:1 	}
     [java] 41:1 	IF
     [java] 41:4 	(
     [java] 41:5 	identifier(i)
     [java] 41:7 	==
     [java] 41:10 	integer literal(10)
     [java] 41:13 	||
     [java] 41:16 	identifier(i)
     [java] 41:18 	<
     [java] 41:20 	integer literal(21)
     [java] 41:23 	||
     [java] 41:26 	identifier(i)
     [java] 41:28 	>
     [java] 41:30 	integer literal(-17)
     [java] 41:34 	||
     [java] 41:37 	identifier(i)
     [java] 41:39 	!=
     [java] 41:42 	integer literal(123)
     [java] 41:45 	)
     [java] 41:47 	{
     [java] 42:2 	identifier(i)
     [java] 42:3 	++
     [java] 42:5 	;
     [java] 43:2 	identifier(j)
     [java] 43:3 	--
     [java] 43:5 	;
     [java] 44:2 	PRINT
     [java] 44:7 	(
     [java] 44:9 	identifier(i)
     [java] 44:10 	,
     [java] 44:11 	identifier(j)
     [java] 44:12 	)
     [java] 44:13 	;
     [java] 45:2 	identifier(p)
     [java] 45:3 	(
     [java] 45:4 	integer literal(17)
     [java] 45:6 	)
     [java] 45:7 	;
     [java] 46:1 	}
     [java] 48:1 	IF
     [java] 48:4 	(
     [java] 48:5 	identifier(i)
     [java] 48:7 	>=
     [java] 48:10 	identifier(f)
     [java] 48:11 	(
     [java] 48:12 	integer literal(-3)
     [java] 48:14 	)
     [java] 48:16 	||
     [java] 48:19 	identifier(i)
     [java] 48:21 	<=
     [java] 48:24 	identifier(f)
     [java] 48:25 	(
     [java] 48:26 	identifier(i)
     [java] 48:27 	-
     [java] 48:28 	integer literal(1)
     [java] 48:29 	)
     [java] 48:30 	)
     [java] 49:2 	PRINT
     [java] 49:7 	(
     [java] 49:9 	identifier(i)
     [java] 49:11 	,
     [java] 49:13 	identifier(f)
     [java] 49:14 	(
     [java] 49:15 	identifier(i)
     [java] 49:16 	)
     [java] 49:18 	,
     [java] 49:20 	string literal("\n")
     [java] 49:24 	)
     [java] 49:25 	;
     [java] 51:1 	}
     [java] End test of CSX scanner.
BUILD SUCCESSFUL
Total time: 2 seconds
